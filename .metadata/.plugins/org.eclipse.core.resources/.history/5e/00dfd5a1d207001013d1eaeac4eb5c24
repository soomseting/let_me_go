package com.LINKER.users.service;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;

import com.LINKER.mapper.UsersMapper;
import com.LINKER.users.model.UsersDAO;
import com.LINKER.users.model.UsersDTO;
import com.LINKER.util.mybatis.MybatisUtil;

public class UsersServiceImpl implements UsersService {

	private SqlSessionFactory sqlSessionFactory = MybatisUtil.getSqlSessionFactory();
	
	@Override
	public void join(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		// 값을 받음
		int user_id =  Integer.parseInt(request.getParameter("user_id"));
		String user_name = request.getParameter("user_name");
		String email = request.getParameter("email");
		String password = request.getParameter("password");
		String phone = request.getParameter("phone");
		String created_at = request.getParameter("created_at");
		String mem_code = request.getParameter("mem_code");
		int cart_id = Integer.parseInt(request.getParameter("cart_id"));
		int user_point = Integer.parseInt(request.getParameter("user_point"));
		String user_address = request.getParameter("user_address");
//		if (snsYn == null) {
//			snsYn = "N";
//		}
//		String email = emailPrev + "@" + emailNext;

//		System.out.println(emailPrev);
//		System.out.println(emailNext);
//		System.out.println(name);
//		System.out.println(pw);
//		System.out.println(phone);
//		System.out.println(gender);
//		System.out.println(snsYn);

//		// DAO객체생성
//		UsersDAO dao = UsersDAO.getInstance();
//
//		int result = dao.idDuplicationCheck(email);
//
//		if (result == 1) {
//
//			// msg를 화면에 보냄
//			request.setAttribute("msg", "이미 존재하는 아이디입니다");
//			request.getRequestDispatcher("join.jsp").forward(request, response);
//
//		} else {
//			UsersDTO dto = new UsersDTO(email, name, pw, phone, gender, snsYn, null);
//			dao.join(dto);
//
//			// mvc2방식에서 리다이렉트는 다시 컨트롤러를 태워서 이동할 때 사용함
//			response.sendRedirect("login.users");
//
//		}

	}

	@Override
	public int addUser(UserDTO userDto) {
		SqlSession sql = sqlSessionFactory.openSession(true);
		UserMapper user = sql.getMapper(UserMapper.class);
		
		return user.addUser(userDto);
	}
	
	@Override
	public int login(UsersDTO usersDto) throws ServletException, IOException {
		SqlSession sql = sqlSessionFactory.openSession(true);
		UsersMapper user = sql.getMapper(UsersMapper.class);
		
		return user.login(usersDto);
	}

	@Override
	public void modify(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		/*
		 * update 테이블명 set 업데이트할 값 where pk = ?
		 * 
		 * 1. 화면에서 넘어온 값을 받습니다(이름, 성별, 휴대폰, 수신여부) 
		 * 2. email값은 세션에서 얻습니다. 
		 * 3. DAO는 modify() 메서드를 생성을하고 업데이트를 진행합니다. 
		 * 4. DAO 성공 시 1을 반환하고, 실패 시 0을 반환합니다. 
		 * 5. 서비스에서는 정보수정성공시에 메인페이지로 이동, 실패시에는 mypage로 이동
		 */

		String name = request.getParameter("user_name");
		String gender = request.getParameter("gender");
		String phone = request.getParameter("phone");
		String snsYn = request.getParameter("sns_yn");

		HttpSession session = request.getSession();
		UsersDTO dto = (UsersDTO)session.getAttribute("userDTO");
		String email = dto.getEmail();
		
		//dao호출
//		UsersDAO dao = UsersDAO.getInstance();
//		int result= dao.modify(name, gender, phone, snsYn, email);
//
//		if (result == 0) {//fail  실패시 보낼 데이터는 없으니 redirect 써도 됨
//			request.setAttribute("msg", "실패");
//			request.getRequestDispatcher("mypage.jsp").forward(request, response);
//		} else {//true
//			//세션의 정보도 업데이트
//			UsersDTO userDTO = new UsersDTO(email,name,null,phone,gender,snsYn,null);
//			session.setAttribute("userDTO", dao);
//			//-----------------------------------------------------------
//			dto = dao.getInfo(email);
//			session.setAttribute("userDTO", dto);
////			response.sendRedirect("../index.jsp");
//			//-----------------------------------------------------------
//			//화면에 메시지를 보내는 또다른 방법(out 객체 사용)
//			response.setContentType("text/html; charset=UTF-8");
//			PrintWriter out = response.getWriter();
//			
//			out.println("<script>");
//			out.println("alert('정보가 수정되었습니다');");
//			out.println("location.href='/LINKER/index.jsp';");
//			out.println("</script>");
//			
//		}
	}

	@Override
	public void delete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		/*
		 * 1. delete from 테이블 명 where 키 = ?
		 * 2. 이메일은 세션에 있습니다
		 * 3. 이메일을 얻어서 dao에서 삭제를 진행하면 됩니다
		 * 4. 삭제 성공시에는 세션을 삭제하고 메인페이지로 이동(메시지도 띄워주세요), 
		 *    실패시에는 마이페이지로 이동 redirect
		 */
		HttpSession session = request.getSession();
		UsersDTO dto = (UsersDTO)session.getAttribute("userDTO");
		String email = dto.getEmail();
		
		UsersDAO dao = UsersDAO.getInstance();
		int result = dao.delete(email);
		
		if(result == 1) {
			
			
			//화면에 메시지를 보내는 또다른 방법(out 객체 사용)
			response.setContentType("text/html; charset=UTF-8");
			PrintWriter out = response.getWriter();
			
			out.println("<script>");
			out.println("alert('정보가 삭제되었습니다');");
			out.println("location.href='/LINKER/index.jsp';");
			out.println("</script>");
			session.removeAttribute("userDTO"); //세션 삭제
//			session.invalidate();//모든 세션 삭제
			
		}else {
			response.sendRedirect("/mypage.users");
		}
	}

}
